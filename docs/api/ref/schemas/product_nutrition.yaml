type: object
title: product_nutrition
description: |
  Nutrition fields of a product

  Most of these properties are read-only.

  See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)
properties:
  no_nutrition_data:
    type: string
    description: |
      When a product does not have nutrition data displayed on the
      packaging, the user can check the field "Nutrition facts are
      not specified on the product".
      By doing so, the no_nutrition_data field takes the value "on".
      This case is frequent (thousands of products).
    examples:
      - "on"
  nutrition_data_per:
    type: string
    enum:
      - serving
      - 100g
    description: |
      The nutrition data on the package can be per serving or per 100g.

      This is essential to understand if `<nutrient>_value` and `<nutrient>`
      values in `nutriments` applies for a serving or for 100g.

      **IMPORTANT:**
      When writing products,
      this setting applies to all existing nutrients values for the product,
      not only the nutrient values sent in the write request.
      So it should not be changed unless all nutrients values are provided
      with values that match the nutrition_data_per field.
  nutrition_data_prepared_per:
    type: string
    enum:
      - serving
      - 100g
    description: |
      The nutrition data for prepared product on the package (if any) can be per serving or per 100g.

      This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
      values in `nutriments` applies for a serving or for 100g.

      See also important note on `nutrition_data_per`.
  nutriments:
    description: |
      All known nutrients for the product.

      Note that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,
      see patternProperties below.

      A specific `_unit` is the unit used to measure the nutrient.

      Beware that some properties are to be interpreted based upon `nutrition_data_per` value.

      Also for products that have a nutrition table for prepared product
      (eg. the nutrition facts for a bowl of milk with cocoa powder),
      a `_prepared` suffix is added (before other suffixes).

      You can get all possible nutrients from the
      [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)

      **FIXME** add more nutrients with description.
    allOf:
      - $ref: "./nutrients/alcohol.yaml#/components/schemas/alcohol"
      - $ref: "./nutrients/beta_glucan.yaml#/components/schemas/beta_glucan"
      - $ref: "./nutrients/calcium.yaml#/components/schemas/calcium"
      - $ref: "./nutrients/carbohydrates.yaml#/components/schemas/carbohydrates"
      - $ref: "./nutrients/carbon-footprint-from-known-ingredients.yaml#/components/schemas/carbon-footprint-from-known-ingredients"
      - $ref: "./nutrients/carbon-footprint-from-known-ingredients-product.yaml#/components/schemas/carbon-footprint-from-known-ingredients-product"
      - $ref: "./nutrients/choline.yaml#/components/schemas/choline"
      - $ref: "./nutrients/cholesterol.yaml#/components/schemas/cholesterol"
      - $ref: "./nutrients/cocoa.yaml#/components/schemas/cocoa"
      - $ref: "./nutrients/copper.yaml#/components/schemas/copper"
      - $ref: "./nutrients/energy.yaml#/components/schemas/energy"
      - $ref: "./nutrients/energy_kj.yaml#/components/schemas/energy_kj"
      - $ref: "./nutrients/energy-kcal.yaml#/components/schemas/energy-kcal"
      - $ref: "./nutrients/erythritol.yaml#/components/schemas/erythritol"
      - $ref: "./nutrients/fat.yaml#/components/schemas/fat"
      - $ref: "./nutrients/fiber.yaml#/components/schemas/fiber"
      - $ref: "./nutrients/fluoride.yaml#/components/schemas/fluoride"
      - $ref: "./nutrients/fruits-vegetables-legumes-estimate-from-ingredients.yaml#/components/schemas/fruits-vegetables-legumes-estimate-from-ingredients"
      - $ref: "./nutrients/fruits_vegetables_nuts_colza_walnut_olive_oils.yaml#/components/schemas/fruits_vegetables_nuts_colza_walnut_olive_oils"
      - $ref: "./nutrients/fruits-vegetables-nuts-estimate.yaml#/components/schemas/fruits-vegetables-nuts-estimate"
      - $ref: "./nutrients/fruits-vegetables-nuts-estimate-from-ingredients.yaml#/components/schemas/fruits-vegetables-nuts-estimate-from-ingredients"
      - $ref: "./nutrients/iodine.yaml#/components/schemas/iodine"
      - $ref: "./nutrients/iron.yaml#/components/schemas/iron"
      - $ref: "./nutrients/magnesium.yaml#/components/schemas/magnesium"
      - $ref: "./nutrients/manganese.yaml#/components/schemas/manganese"
      - $ref: "./nutrients/monounsaturated_fat.yaml#/components/schemas/monounsaturated_fat"
      - $ref: "./nutrients/nova-group.yaml#/components/schemas/nova-group"
      - $ref: "./nutrients/nutrition-score-fr.yaml#/components/schemas/nutrition-score-fr"
      - $ref: "./nutrients/omega_3_fat.yaml#/components/schemas/omega_3_fat"
      - $ref: "./nutrients/omega_6_fat.yaml#/components/schemas/omega_6_fat"
      - $ref: "./nutrients/phosphorus.yaml#/components/schemas/phosphorus"
      - $ref: "./nutrients/polyunsaturated_fat.yaml#/components/schemas/polyunsaturated_fat"
      - $ref: "./nutrients/polyols.yaml#/components/schemas/polyols"
      - $ref: "./nutrients/potassium.yaml#/components/schemas/potassium"
      - $ref: "./nutrients/proteins.yaml#/components/schemas/proteins"
      - $ref: "./nutrients/selenium.yaml#/components/schemas/selenium"
      - $ref: "./nutrients/salt.yaml#/components/schemas/salt"
      - $ref: "./nutrients/saturated-fat.yaml#/components/schemas/saturated-fat"
      - $ref: "./nutrients/sodium.yaml#/components/schemas/sodium"
      - $ref: "./nutrients/sugars.yaml#/components/schemas/sugars"
      - $ref: "./nutrients/trans_fat.yaml#/components/schemas/trans_fat"
      - $ref: "./nutrients/vitamin_a.yaml#/components/schemas/vitamin_a"
      - $ref: "./nutrients/vitamin_b1.yaml#/components/schemas/vitamin_b1"
      - $ref: "./nutrients/vitamin_b2.yaml#/components/schemas/vitamin_b2"
      - $ref: "./nutrients/vitamin_b3.yaml#/components/schemas/vitamin_b3"
      - $ref: "./nutrients/vitamin_b5.yaml#/components/schemas/vitamin_b5"
      - $ref: "./nutrients/vitamin_b6.yaml#/components/schemas/vitamin_b6"
      - $ref: "./nutrients/vitamin_b7.yaml#/components/schemas/vitamin_b7"
      - $ref: "./nutrients/vitamin_b8.yaml#/components/schemas/vitamin_b8"
      - $ref: "./nutrients/vitamin_b9.yaml#/components/schemas/vitamin_b9"
      - $ref: "./nutrients/vitamin_b10.yaml#/components/schemas/vitamin_b10"
      - $ref: "./nutrients/vitamin_b11.yaml#/components/schemas/vitamin_b11"
      - $ref: "./nutrients/vitamin_b12.yaml#/components/schemas/vitamin_b12"
      - $ref: "./nutrients/vitamin_c.yaml#/components/schemas/vitamin_c"
      - $ref: "./nutrients/vitamin_d.yaml#/components/schemas/vitamin_d"
      - $ref: "./nutrients/vitamin_e.yaml#/components/schemas/vitamin_e"
      - $ref: "./nutrients/vitamin_f.yaml#/components/schemas/vitamin_f"
      - $ref: "./nutrients/vitamin_k.yaml#/components/schemas/vitamin_k"
      - $ref: "./nutrients/vitamin_pp.yaml#/components/schemas/vitamin_pp"
      - $ref: "./nutrients/water.yaml#/components/schemas/water"
      - $ref: "./nutrients/zinc.yaml#/components/schemas/zinc"
      - type: object
        properties:
          aux_100g:
            type: number
          aux_label:
            type: string
          aux_serving:
            type: number
          aux_unit:
            type: string
          aux_value:
            type: number
            examples:
              - 12.5
        #additionalProperties:
        #  type: string

        patternProperties:
          '(?<nutrient>[\w-]+)_unit':
            description: |
              The unit in which the nutrient for 100g or per serving is measured.

              The possible values depends on the nutrient.

              * `g` for grams
              * `mg` for milligrams
              * `Œºg` for micrograms
              * `cl` for centiliters
              * `ml` for mililiters
              * `dv` for recommended daily intakes (aka [Dietary Reference Intake](https://en.wikipedia.org/wiki/Dietary_Reference_Intake))
              * `% vol` for alcohol vol per 100 ml

              ü§ì code: see the [Units module][units-module],
              and [Food:default_unit_for_nid function][default-unit]

              [units-module]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Units.html
              [default-unit]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Food.html#default_unit_for_nid_(_%24nid)
            type: string
            enum:
              [
                "ÂÖ¨Êñ§",
                "ÂÖ¨Âçá",
                "kg",
                "–∫–≥",
                "l",
                "–ª",
                "ÊØ´ÂÖã",
                "mg",
                "–º–≥",
                "mcg",
                "¬µg",
                "oz",
                "fl oz",
                "dl",
                "–¥–ª",
                "cl",
                "–∫–ª",
                "Êñ§",
                "g",
                "",
                " ",
                "kJ",
                "ÂÖã",
                "ÂÖ¨ÂÖã",
                "–≥",
                "–º–ª",
                "ml",
                "mmol/l",
                "ÊØ´Âçá",
                "% vol",
                "ph",
                "%",
                "% dv",
                "% vol (alcohol)",
                "iu",
                "mol/l",
                "mval/l",
                "ppm",
                "ÔøΩrh",
                "ÔøΩfh",
                "ÔøΩe",
                "ÔøΩdh",
                "gpg",
              ]
          '(?<nutrient>[\w-]+)_100g':
            description: |
              The standardized value of a serving of 100g (or 100ml for liquids)
              for the nutrient.

              This is computed from the `nutrient` property,
              the serving size (if needed), and the `nutrient`_unit field.

              **Note**:
              If you want to characterize products in a uniform way, this is the value you should use.
            type: number
            readOnly: true
          '(?<nutrient>[\w-]+)_serving':
            description: |
              The standardized value of a serving for this product.
            type: number
            readOnly: true
          '(?<nutrient>[\w-]+)_value':
            description: |
              The value input by the user / displayed on the product for the nutrient.

              * per 100g or serving, depending on `nutrition_data_per`
              * in the unit of corresponding <nutrient>_unit field.
            type: number
            readOnly: true
          '(?<nutrient>[\w-]+)_label':
            description: |
              The label for nutrient.
            type: string
          '(?<nutrient>[\w-]+)_prepared':
            description: |
              The value for nutrient for **prepared** product.
            type: number
          '(?<nutrient>[\w-]+)_prepared_unit':
            description: |
              The unit in which the nutrient of **prepared** product is measured.
            type: string
          '(?<nutrient>[\w-]+)_prepared_100g':
            description: |
              The standardized value of a serving of 100g (or 100ml for liquids)
              for the nutrient, for **prepared** product.
            type: number
            readOnly: true
          '(?<nutrient>[\w-]+)_prepared_serving':
            description: |
              The standardized value of a serving for the **prepared** product.
            type: number
            readOnly: true
          '(?<nutrient>[\w-]+)_prepared_value':
            description: |
              The standardized value for a serving or 100g (or 100ml for liquids),
              depending on `nutrition_data_prepared_per`
              for the nutrient for **prepared** product.
            type: number
            readOnly: true

  #TODO: migrated on product_nutriscore.yaml (if *_ratio fields are not available anymore, remove this)
  nutriscore_data:
    description: |
      Detail of data the Nutri-Score was computed upon.

      **Note**: this might not be stable, don't rely too much on this, or, at least, tell us !

      **TODO** document each property
    type: object
    properties:
      # **TODO** "*_ratio" are still available?
      saturated_fat_ratio:
        type: number
      saturated_fat_ratio_points:
        type: integer
      saturated_fat_ratio_value:
        type: number
  nutrition_grade_fr:
    type: string
    description: |
      Nutrition grade (‚Äòa‚Äô to ‚Äòe‚Äô),
      https://world.openfoodfacts.org/nutriscore.
  nutrition_grades:
    description: |
      Nutrition grades as a comma separated list.

      Some products with multiple components might have multiple Nutri-Score
    type: string
  nutrition_grades_tags:
    type: array
    items:
      type: string
  nutrition_score_beverage:
    type: integer
  nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients:
    type: integer
  nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value:
    type: integer
  nutrition_score_warning_fruits_vegetables_nuts_estimate:
    type: integer
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients:
    type: integer
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value:
    type: integer
  nutrition_score_warning_no_fiber:
    type: integer
  other_nutritional_substances_tags:
    type: array
    items:
      type: object
  unknown_nutrients_tags:
    type: array
    items:
      type: object
  vitamins_tags:
    type: array
    items:
      type: string
